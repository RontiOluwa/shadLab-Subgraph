// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CarsItem extends ethereum.Event {
  get params(): CarsItem__Params {
    return new CarsItem__Params(this);
  }
}

export class CarsItem__Params {
  _event: CarsItem;

  constructor(event: CarsItem) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get VIN(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get color(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class InspectionItem extends ethereum.Event {
  get params(): InspectionItem__Params {
    return new InspectionItem__Params(this);
  }
}

export class InspectionItem__Params {
  _event: InspectionItem;

  constructor(event: InspectionItem) {
    this._event = event;
  }

  get _itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get VIN(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get date(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Cars__carsResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;
  value3: string;

  constructor(value0: BigInt, value1: BigInt, value2: string, value3: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getVIN(): BigInt {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getColor(): string {
    return this.value3;
  }
}

export class Cars__getAllCarsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get VIN(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get color(): string {
    return this[3].toString();
  }
}

export class Cars__getAllInspectionResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get VIN(): BigInt {
    return this[1].toBigInt();
  }

  get date(): string {
    return this[2].toString();
  }
}

export class Cars__getCarResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get VIN(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get color(): string {
    return this[3].toString();
  }
}

export class Cars__inspectionResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;

  constructor(value0: BigInt, value1: BigInt, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getVIN(): BigInt {
    return this.value1;
  }

  getDate(): string {
    return this.value2;
  }
}

export class Cars extends ethereum.SmartContract {
  static bind(address: Address): Cars {
    return new Cars("Cars", address);
  }

  cars(param0: BigInt): Cars__carsResult {
    let result = super.call(
      "cars",
      "cars(uint256):(uint256,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Cars__carsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString(),
      result[3].toString()
    );
  }

  try_cars(param0: BigInt): ethereum.CallResult<Cars__carsResult> {
    let result = super.tryCall(
      "cars",
      "cars(uint256):(uint256,uint256,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cars__carsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString(),
        value[3].toString()
      )
    );
  }

  getAllCars(): Array<Cars__getAllCarsResultValue0Struct> {
    let result = super.call(
      "getAllCars",
      "getAllCars():((uint256,uint256,string,string)[])",
      []
    );

    return result[0].toTupleArray<Cars__getAllCarsResultValue0Struct>();
  }

  try_getAllCars(): ethereum.CallResult<
    Array<Cars__getAllCarsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllCars",
      "getAllCars():((uint256,uint256,string,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Cars__getAllCarsResultValue0Struct>()
    );
  }

  getAllInspection(): Array<Cars__getAllInspectionResultValue0Struct> {
    let result = super.call(
      "getAllInspection",
      "getAllInspection():((uint256,uint256,string)[])",
      []
    );

    return result[0].toTupleArray<Cars__getAllInspectionResultValue0Struct>();
  }

  try_getAllInspection(): ethereum.CallResult<
    Array<Cars__getAllInspectionResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllInspection",
      "getAllInspection():((uint256,uint256,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Cars__getAllInspectionResultValue0Struct>()
    );
  }

  getCar(vin: BigInt): Array<Cars__getCarResultValue0Struct> {
    let result = super.call(
      "getCar",
      "getCar(uint256):((uint256,uint256,string,string)[])",
      [ethereum.Value.fromUnsignedBigInt(vin)]
    );

    return result[0].toTupleArray<Cars__getCarResultValue0Struct>();
  }

  try_getCar(
    vin: BigInt
  ): ethereum.CallResult<Array<Cars__getCarResultValue0Struct>> {
    let result = super.tryCall(
      "getCar",
      "getCar(uint256):((uint256,uint256,string,string)[])",
      [ethereum.Value.fromUnsignedBigInt(vin)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Cars__getCarResultValue0Struct>()
    );
  }

  getServiceWorkerCount(): BigInt {
    let result = super.call(
      "getServiceWorkerCount",
      "getServiceWorkerCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getServiceWorkerCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getServiceWorkerCount",
      "getServiceWorkerCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  inspection(param0: BigInt): Cars__inspectionResult {
    let result = super.call(
      "inspection",
      "inspection(uint256):(uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Cars__inspectionResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString()
    );
  }

  try_inspection(param0: BigInt): ethereum.CallResult<Cars__inspectionResult> {
    let result = super.tryCall(
      "inspection",
      "inspection(uint256):(uint256,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Cars__inspectionResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString()
      )
    );
  }

  serviceWorker(param0: Address): BigInt {
    let result = super.call(
      "serviceWorker",
      "serviceWorker(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_serviceWorker(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "serviceWorker",
      "serviceWorker(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddCarCall extends ethereum.Call {
  get inputs(): AddCarCall__Inputs {
    return new AddCarCall__Inputs(this);
  }

  get outputs(): AddCarCall__Outputs {
    return new AddCarCall__Outputs(this);
  }
}

export class AddCarCall__Inputs {
  _call: AddCarCall;

  constructor(call: AddCarCall) {
    this._call = call;
  }

  get _VIN(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _color(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddCarCall__Outputs {
  _call: AddCarCall;

  constructor(call: AddCarCall) {
    this._call = call;
  }
}

export class AddInspectionCall extends ethereum.Call {
  get inputs(): AddInspectionCall__Inputs {
    return new AddInspectionCall__Inputs(this);
  }

  get outputs(): AddInspectionCall__Outputs {
    return new AddInspectionCall__Outputs(this);
  }
}

export class AddInspectionCall__Inputs {
  _call: AddInspectionCall;

  constructor(call: AddInspectionCall) {
    this._call = call;
  }

  get _VIN(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _date(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class AddInspectionCall__Outputs {
  _call: AddInspectionCall;

  constructor(call: AddInspectionCall) {
    this._call = call;
  }
}

export class AddWorkerCall extends ethereum.Call {
  get inputs(): AddWorkerCall__Inputs {
    return new AddWorkerCall__Inputs(this);
  }

  get outputs(): AddWorkerCall__Outputs {
    return new AddWorkerCall__Outputs(this);
  }
}

export class AddWorkerCall__Inputs {
  _call: AddWorkerCall;

  constructor(call: AddWorkerCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddWorkerCall__Outputs {
  _call: AddWorkerCall;

  constructor(call: AddWorkerCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
